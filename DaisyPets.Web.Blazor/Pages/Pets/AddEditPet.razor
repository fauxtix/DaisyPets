@using DaisyPets.Core.Application.Formatting;
@using DaisyPets.Core.Application.ViewModels;
@using DaisyPets.Core.Application.ViewModels.LookupTables;
@using DaisyPets.Web.Blazor.Pages.CodeBehind.Pets;
@using System.Globalization;
@using static DaisyPets.Core.Application.Enums.Common;

@inherits PetsMainPageBase

<div class="container-fluid d-md-flex flex-column">
    <div>
        <HeaderDialogComponent HeaderCaption="@HeaderCaption" ImageName="pets"></HeaderDialogComponent>
        <hr />
    </div>

    <EditForm Model="UserSelectedPet">
        <div class="row mt-2">
            <div class="col-md-6">
                <div class="form-group">
                    <SfTextBox Enabled="true"
                               Placeholder="@L["TituloNome"]"
                               CssClass="e-field  e-corner"
                               FloatLabelType="@FloatLabelType.Always"
                    @bind-Value="@UserSelectedPet!.Nome">
                    </SfTextBox>
                </div>
                <div class="row d-flex">
                    <div class="col-md-6">
                        <div class="group-box">
                            <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                            Value="@idxSpecie" ShowClearButton="true"
                                            FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                            Placeholder="@L["TituloEspecie"]" DataSource="@Species" FloatLabelType="FloatLabelType.Always">
                                <DropDownListTemplates TItem="LookupTableVM">
                                </DropDownListTemplates>
                                <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeSpecie"></DropDownListEvents>
                                <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="group-box mt-2">
                            <SfDatePicker Placeholder="@L["TituloDtNascimento"]"
                                          CssClass="e-align-middle e-corner"
                                          FloatLabelType="FloatLabelType.Always"
                            @bind-Value="@dNascimento">
                                <DatePickerEvents TValue="DateTime" ValueChange="DataNascimentoChanged"></DatePickerEvents>
                            </SfDatePicker>
                        </div>
                    </div>
                    <div class="d-flex mt-1">
                        <SfRadioButton Label="@L["TituloFeminino"]" Name="Gender"
                        @onchange="onChangeGender"
                                       TChecked="string" Value="F" @bind-Checked="@UserSelectedPet.Genero"></SfRadioButton>&nbsp;&nbsp;
                        <SfRadioButton Label="@L["TituloMasculino"]" Name="Gender"
                        @onchange="onChangeGender"
                                       TChecked="string" Value="M" @bind-Checked="@UserSelectedPet.Genero"></SfRadioButton>
                    </div>
                </div>
                <div class="form-group mt-2">
                    <SfTextBox Enabled="true"
                               Placeholder="@L["TituloCor"]"
                               CssClass="e-field  e-corner"
                               FloatLabelType="@FloatLabelType.Always"
                    @bind-Value="@UserSelectedPet!.Cor">
                    </SfTextBox>
                </div>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <SfCheckBox Label="@L["Pet_Sterilised"]" @bind-Checked=@esterilizado @onchange="onChangeEsterilizado"></SfCheckBox>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <SfCheckBox Label="@L["TituloPadrinho"]" @bind-Checked=@padrinho @onchange="onChangePadrinho"></SfCheckBox>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                @if (string.IsNullOrEmpty(UserSelectedPet.Foto))
                {
                    <div class="form-group my-3">
                        <SfUploader ID="UploadFiles" @ref="sfUploader" AutoUpload=true
                                    DropArea=".control-fluid"
                                    AllowMultiple="false" AllowedExtensions=".jpg, .jpeg, .png"
                                    MaxFileSize="@MaxFileSize">
                            <UploaderAsyncSettings SaveUrl="api/upload/save"
                                                   RemoveUrl="api/upload/remove" />
                            <UploaderEvents OnActionComplete="@OnActionCompleteHandler" />
                        </SfUploader>
                    </div>
                }
                else
                {
                    <div class="d-flex align-items-center">
                        <div class="img-responsive mx-auto">
                            <img class="rounded mx-auto" src="/uploads/pets/@UserSelectedPet?.Foto" width="180" height="180" />
                        </div>
                    </div>
                }
            </div>
        </div>
        <hr class="divider" />
        <div class="row">
            <div class="col-md-2">
                <div class="form-group">
                    <SfCheckBox Label="Chip" @bind-Checked=@chipado @onchange="onChangeChipado"></SfCheckBox>
                </div>
            </div>
            @if (UserSelectedPet.Chipado == 1)
            {
                <div class="col-md-4">
                    <div class="form-group">
                        <SfDatePicker Placeholder="@L["TituloData"]"
                                      Width="150px"
                                      CssClass="e-align-middle e-corner"
                                      FloatLabelType="FloatLabelType.Always"
                        @bind-Value="@dChipagem">
                            <DatePickerEvents TValue="DateTime" ValueChange="DataChipChanged"></DatePickerEvents>
                        </SfDatePicker>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <SfTextBox Enabled="true"
                                   Placeholder="@L["TituloNumero"]"
                                   CssClass="e-field  e-corner"
                                   Width="200px"
                                   FloatLabelType="@FloatLabelType.Always"
                        @bind-Value="@UserSelectedPet!.NumeroChip">
                        </SfTextBox>
                    </div>
                </div>
            }
        </div>
        <div class="row mt-3">
            <div class="col-md-6">
                <div class="form-group">
                    <SfTextBox Enabled="true"
                               Placeholder="@L["TituloMedicacao"]"
                               CssClass="e-field  e-corner" Multiline="true"
                               FloatLabelType="@FloatLabelType.Always"
                    @bind-Value="@UserSelectedPet!.Medicacao">
                    </SfTextBox>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <SfTextBox Enabled="true"
                               Placeholder="@L["TituloDoencaCronica"]"
                               CssClass="e-field  e-corner" Multiline="true"
                               FloatLabelType="@FloatLabelType.Always"
                    @bind-Value="@UserSelectedPet!.DoencaCronica">
                    </SfTextBox>
                </div>
            </div>

        </div>
        <div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="group-box">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    Value="@idxBreed" ShowClearButton="true" Width="250px"
                                    FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="@L["Pet_Breed"]" DataSource="@Breeds" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeBreed"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="col-md-6">
                <div class="group-box">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    Value="@idxSituation" ShowClearButton="true" Width="250px"
                                    FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="@L["TituloSituacao"]" DataSource="@Situations" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeSituation"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="group-box">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    Value="@idxSize" ShowClearButton="true" Width="250px"
                                    FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="@L["Pet_Size"]" DataSource="@Sizes" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeSize"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="col-md-6">
                <div class="group-box">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    Value="@idxTemperament" ShowClearButton="true" Width="250px"
                                    FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="@L["TituloTemperamento"]" DataSource="@Temperaments" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeTemperament"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
        </div>
        <div class="row cols-12">
            <div class="form-group">
                <SfTextBox Enabled="true"
                           Placeholder="@L["TituloNotas"]"
                           CssClass="e-field  e-corner" Multiline="true"
                           FloatLabelType="@FloatLabelType.Always"
                @bind-Value="@UserSelectedPet!.Observacoes">
                </SfTextBox>
            </div>
        </div>
    </EditForm>
</div>



@code {

    [Parameter] public PetDto? UserSelectedPet { get; set; }
    [Parameter] public OpcoesRegisto EditMode { get; set; }
    [Parameter] public string? HeaderCaption { get; set; }

    protected int idxBreed;
    protected int idxSituation;
    protected int idxSize;
    protected int idxTemperament;
    protected int idxSpecie;

    protected DateTime dNascimento { get; set; }
    protected DateTime dChipagem { get; set; } = DateTime.Now.Date;
    protected bool? chipado { get; set; } = null;
    protected bool? esterilizado { get; set; } = null;
    protected bool? padrinho { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        idxBreed = UserSelectedPet.IdRaca;
        idxSituation = UserSelectedPet.IdSituacao;
        idxSize = UserSelectedPet.IdTamanho;
        idxTemperament = UserSelectedPet.IdTemperamento;
        idxSpecie = UserSelectedPet.IdEspecie;


        if (DataFormat.IsValidDate(UserSelectedPet.DataNascimento))
        {
            dNascimento = DateTime.Parse(UserSelectedPet.DataNascimento);
        }
        else
        {
            dNascimento = DateTime.Parse(UserSelectedPet.DataNascimento.Substring(3, 2) + "/" + UserSelectedPet.DataNascimento.Substring(0, 2) + UserSelectedPet.DataNascimento.Substring(5));
        }
        chipado = Convert.ToBoolean(UserSelectedPet.Chipado);
        esterilizado = Convert.ToBoolean(UserSelectedPet.Esterilizado);
        padrinho = Convert.ToBoolean(UserSelectedPet.Padrinho);

        if (UserSelectedPet.Chipado == 1)
        {
            if (DataFormat.IsValidDate(UserSelectedPet.DataChip))
                dChipagem = DateTime.Parse(UserSelectedPet.DataChip);
            else
                dChipagem = DateTime.Parse(UserSelectedPet.DataChip.Substring(3, 2) + "/" + UserSelectedPet.DataChip.Substring(0, 2) + UserSelectedPet.DataChip.Substring(5));
        }
    }

    protected void onChangeBreed(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxBreed = args.Value;
        UserSelectedPet!.IdRaca = idxBreed;
    }
    protected void onChangeSpecie(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxSpecie = args.Value;
        UserSelectedPet!.IdEspecie = idxSpecie;
    }

    protected void onChangeSize(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxSize = args.Value;
        UserSelectedPet!.IdTamanho = idxSize;
    }
    protected void onChangeSituation(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxSituation = args.Value;
        UserSelectedPet!.IdSituacao = idxSituation;
    }
    protected void onChangeTemperament(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxTemperament = args.Value;
        UserSelectedPet!.IdTemperamento = idxTemperament;
    }

    protected void DataNascimentoChanged(ChangedEventArgs<DateTime> args)
    {
        UserSelectedPet.DataNascimento = args.Value.ToShortDateString();
    }
    protected void DataChipChanged(ChangedEventArgs<DateTime> args)
    {
        UserSelectedPet.DataChip = args.Value.ToShortDateString();
    }

    protected void OnActionCompleteHandler(Syncfusion.Blazor.Inputs.ActionCompleteEventArgs args)
    {
        if (args.FileData.Count() == 0) return;

        uploadedFile = args.FileData.Select(p => p.Name).FirstOrDefault();
        UserSelectedPet.Foto = uploadedFile ?? "";

        StateHasChanged();
    }

    private void onChangeGender(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        UserSelectedPet.Genero = args.Value.ToString();
    }
    private void onChangeChipado(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        chipado = Convert.ToBoolean(args.Value);
        UserSelectedPet.Chipado = chipado.Value ? 1 : 0;
    }
    private void onChangeEsterilizado(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        esterilizado = Convert.ToBoolean(args.Value);
        UserSelectedPet.Esterilizado = chipado.Value ? 1 : 0;
    }
    private void onChangePadrinho(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        padrinho = Convert.ToBoolean(args.Value);
        UserSelectedPet.Padrinho = padrinho.Value ? 1 : 0;
    }

    async Task<string> GetLanguage()
    {
        try
        {
            var appLanguageSettingsEndpoint = $"{urlBaseAddress}/AppUtils/Settings/Language";
            using (HttpClient httpClient = new HttpClient())
            {

                var languageSelected = await httpClient.GetStringAsync(appLanguageSettingsEndpoint);
                if (!string.IsNullOrEmpty(languageSelected))
                {
                    return languageSelected;
                }

                else
                    return "";

            }
        }
        catch (Exception ex)
        {
            var x = ex.Message;
            throw;
        }
    }

}