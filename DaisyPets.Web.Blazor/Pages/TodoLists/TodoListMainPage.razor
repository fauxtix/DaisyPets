@page "/todolists/mainpage"
@using DaisyPets.Core.Application.TodoManager;
@using DaisyPets.Core.Application.ViewModels.LookupTables;
@using Microsoft.Extensions.Localization;
@using static DaisyPets.Core.Application.Enums.Common;

<PageTitle>Daisy Pets</PageTitle>
<PageTitleComponent PageTitle="@L["TituloTarefas"]" />

@{
    var Tool = (new List<object>() {
        "Search",
        "ExcelExport",
            new ItemModel()
    {
        Type = ItemType.Separator
    },
    new ItemModel()
    {
        PrefixIcon = "e-filter",
        CssClass = "e-inherit",
        Text = L["TituloPendentes"],
        Id = "Pending",
        ShowTextOn = Syncfusion.Blazor.Navigations.DisplayMode.Overflow,
        ShowAlwaysInPopup = true
    },
    new ItemModel()
    {
        PrefixIcon = "e-filter",
        Text = L["TituloCompletadas"],
        Id = "Completed",
        ShowTextOn = Syncfusion.Blazor.Navigations.DisplayMode.Overflow,
        ShowAlwaysInPopup = true
    },
    new ItemModel()
    {
        PrefixIcon = "e-filter",
        Text = L["msgAll"],
        Id = "All",
        ShowTextOn = Syncfusion.Blazor.Navigations.DisplayMode.Overflow,
        ShowAlwaysInPopup = true
    },
    });
}

@if (ToDoList is null)
{
    <LoadingData />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-3">
                <div class="control-wrapper">
                    <SfCalendar @ref="calendarObj" TValue="DateTime" @bind-Value='@SelectedDate'>
                        <CalendarEvents TValue="DateTime"
                                        OnRenderDayCell="CustomDates" ValueChange="CalendarValuechangeHandler"></CalendarEvents>
                    </SfCalendar>
                </div>
                <div class="display-date">
                    <span class="example-label">Selected date is: <b>@SelectedValue</b></span>
                </div>
            </div>
            <div class="col-md-9">
                <div class="source-options my-2">
                    <SfButton CssClass="e-success e-round-corner" IconCss="fa fa-plus" Content="@(L["btnNovo"])"
                    @onclick="@onAddToDo" IsPrimary="true">
                    </SfButton>
                </div>

                <SfGrid DataSource="@ToDoList"
                        ID="ToDos_Grid" @ref="gridObj"
                        AllowPaging = "true"
                        AllowGrouping="true"
                        AllowTextWrap=true
                        AllowSelection=true
                        AllowSorting=true
                        AllowExcelExport="true"
                        RowHeight="24"
                        Toolbar=@Tool
                        TValue="ToDoDto">
                    <GridPageSettings PageSize="10" PageCount="10" PageSizes="true"></GridPageSettings>
                    <GridEvents RowSelected="RowSelectHandler"
                                OnToolbarClick="ToolbarClickHandler"
                                CommandClicked="OnPetCommandClicked" TValue="ToDoDto">
                    </GridEvents>
                    <GridColumns>
                        <GridColumn Field=@nameof(ToDoDto.Id) IsPrimaryKey="true" Visible="false" HeaderText="Pet" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(ToDoDto.Description) HeaderText="@L["rbtDescricao"]" Width="350"></GridColumn>

                        <GridColumn Field=@nameof(ToDoDto.CategoryDescription) HeaderText="@L["TituloCategoria"]" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(ToDoDto.TodoStartDate) HeaderText="@L["TituloDataInicio"]" Format="d" Width="120">
                            <Template>
                                @{
                                    var todoRow = (context as ToDoDto);
                                    var startDate = todoRow!.TodoStartDate.Date;
                                    var now = DateTime.Now.Date;
                                    if (startDate >= now)
                                    {
                                        var daysToStart = (startDate - now).TotalDays;
                                        if (daysToStart > 15 && daysToStart <= 30)
                                        {
                                            <span style="padding:4px; background-color:orange; color:black">@startDate.ToShortDateString()</span>
                                        }
                                        else if (daysToStart <= 15)
                                        {
                                            <span style="padding:4px;background-color:red; color:white">@startDate.ToShortDateString()</span>
                                        }
                                        else
                                        {
                                            <span>@startDate.ToShortDateString()</span>
                                        }
                                    }
                                    else
                                    {
                                        <span>@startDate.ToShortDateString()</span>
                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(ToDoDto.TodoEndDate) HeaderText="@L["TituloDataFim"]" Format="d" Width="120" TextAlign="TextAlign.Center">
                        </GridColumn>

@*                        <GridColumn Field=Status.Name HeaderText="Status">
                            <Template>
                                <SfChip>
                                    <ChipItems>
                                        @{
                                            var todoRow = (context as ToDoDto);
                                            <ChipItem LeadingIconCss="fa fa-file" CssClass="e-info" Enabled="true"></ChipItem>
                                        }
                                    </ChipItems>
                                </SfChip>
                            </Template>
                        </GridColumn>
*@
                        <GridColumn Field=@nameof(ToDoDto.Pending) HeaderText="@L["TituloPendente"]" DisplayAsCheckBox=true Width="100"></GridColumn>
                        <GridColumn HeaderText="" AllowFiltering="false" AllowSorting="false" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn Type=CommandButtonType.Edit
                                                   ButtonOption="@(new CommandButtonOptions()
                                                                       {
                                                                           CssClass = "e-btn e-primary e-round",
                                                                           IconCss = "fa fa-edit"
                                                                       })">
                                </GridCommandColumn>
                                <GridCommandColumn Type=CommandButtonType.Delete
                                                   ButtonOption="@(new CommandButtonOptions()
                                                                       {
                                                                           CssClass = "e-btn e-danger e-round",
                                                                           IconCss = "fa fa-trash"
                                                                       })">
                                </GridCommandColumn>
                                <GridCommandColumn Type=CommandButtonType.None Title="@L["MSG_Duplicar"]"
                                                   ButtonOption="@(new CommandButtonOptions()
                                                                   {
                                                                       Content = "",
                                                                       CssClass = "e-outline e-success e-round-corner",
                                                                       IconCss = "fa fa-clone",
                                                                       IconPosition = @IconPosition.Left
                                                                   })">
                                </GridCommandColumn>

                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>

    <SfDialog CssClass="responsive-dialog-30"
              IsModal="true"
              ShowCloseIcon="false"
              CloseOnEscape="false"
    @bind-Visible="AddEditToDoVisibility">
        <DialogTemplates>
            <Content>
                <AddEditTodo UserSelectedRecord="@SelectedToDo"
                             EditMode="@RecordMode"
                             HeaderCaption="@(RecordMode == OpcoesRegisto.Gravar? EditCaption : NewCaption)" />
            </Content>
            <FooterTemplate>
                <div>
                    <SfButton CssClass="e-primary e-round-corner" IconCss="fas fa-save"
                    @onclick="SaveToDoData" Content="@L["btnSalvar"]">
                    </SfButton>
                    <SfButton CssClass="e-outline e-round-corner" IconCss="fas fa-times"
                    @onclick="(()=>AddEditToDoVisibility = false)" Content="@L["BtnSalir"]">
                    </SfButton>
                </div>
            </FooterTemplate>
        </DialogTemplates>
        <DialogAnimationSettings Effect="@Effect" Duration=500></DialogAnimationSettings>
    </SfDialog>

    <ConfirmDeleteComponent AlertMessageType="AlertMessageType.Error" DialogWidth="20%"
                            DialogTitle="@WarningTitle" ConfirmationText="@L["MSG_ConfirmarOperacao"]"
                            Module="Modules.Pets"
                            Message="@SelectedToDo?.Description"
                            Visible="@DeleteToDoVisibility"
                            OnConfirmationYes="ConfirmDeleteYes"
                            OnConfirmationNo="@(()=>DeleteToDoVisibility=false)"></ConfirmDeleteComponent>

    <AlertUserComponent AlertMessageType="AlertMessageType.Warning"
                        Title="@AlertTitle"
                        OperationType="OpcoesRegisto.Warning"
                        Visibility="@AlertVisibility"
                        Message="@WarningMessage"
                        OnCloseDialog="(()=>AlertVisibility=false)"></AlertUserComponent>

    <ValidateErrorComponent Visible="@ErrorVisibility"
                            ValidationMessages="@ValidationsMessages"
                            OnCloseDialog="@(()=>ErrorVisibility = false)" />


    <SfToast ID="toast_custom" @ref="ToastObj" ShowProgressBar=true
             Title="@ToastTitle" Icon="@ToastIcon"
             Content="@ToastMessage"
             CssClass="@ToastCss" Timeout="2000"
             ShowCloseButton="true">
        <ToastAnimationSettings>
            <ToastShowAnimationSettings Effect="ToastEffect.FadeIn" Duration="600"></ToastShowAnimationSettings>
            <ToastHideAnimationSettings Effect="ToastEffect.FadeOut" Duration="600"></ToastHideAnimationSettings>
        </ToastAnimationSettings>
        <ToastButtons>
            <ToastButton Content="@L["btnFechar"]" OnClick="@HideToast"></ToastButton>
        </ToastButtons>
        <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    </SfToast>


}


<style>
    #container .e-listview {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
    }

    .sample {
        justify-content: center;
        min-height: 280px;
    }

    .vertical-center {
        align-items: center;
    }

    .padding {
        padding: 4px;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .margin {
        margin: 10px;
    }

    .control-wrapper {
        max-width: 300px;
        margin: 0 auto;
        padding: 20px 0px 10px;
    }

    .example-label {
        font-size: 14px;
        margin: 0;
    }

    .display-date {
        max-width: 300px;
        margin: 0 auto;
        padding: 10px 0px 10px;
    }

    .e-calendar .e-content .e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.personal-appointment span.e-day {
        color: #28a745;
        font-weight: 800;
    }

    .e-calendar .e-content .e-cell.official-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.official-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        color: #dc3545;
        font-weight: 800;
    }

    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        background-color: rgb(255 255 0 / 90%);
    }

</style>