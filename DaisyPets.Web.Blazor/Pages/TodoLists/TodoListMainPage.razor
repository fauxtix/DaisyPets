@page "/todolists/mainpage"
@using DaisyPets.Core.Application.TodoManager;
@using DaisyPets.Core.Application.ViewModels.LookupTables;
@using Microsoft.Extensions.Localization;
@using static DaisyPets.Core.Application.Enums.Common;

<PageTitle>Daisy Pets</PageTitle>
<PageTitleComponent PageTitle="@L["Pet_Title"]" />

@{
    var Tool = (new List<object>() {
        "Search",
        "ExcelExport",
            new ItemModel()
    {
        Type = ItemType.Separator
    },
    new ItemModel()
    {
        PrefixIcon = "e-filter",
        CssClass = "e-inherit",
        Text = L["TituloPendentes"],
        Id = "Pending",
        ShowTextOn = Syncfusion.Blazor.Navigations.DisplayMode.Overflow,
        ShowAlwaysInPopup = true
    },
    new ItemModel()
    {
        PrefixIcon = "e-filter",
        Text = L["TituloCompletadas"],
        Id = "Completed",
        ShowTextOn = Syncfusion.Blazor.Navigations.DisplayMode.Overflow,
        ShowAlwaysInPopup = true
    },
    new ItemModel()
    {
        PrefixIcon = "e-filter",
        Text = L["msgAll"],
        Id = "All",
        ShowTextOn = Syncfusion.Blazor.Navigations.DisplayMode.Overflow,
        ShowAlwaysInPopup = true
    },
    });
}

@if (ToDoList is null)
{
    <LoadingData />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-3">
                <div class="my-2 p-2">
                    <SfCalendar TValue="DateTime" Min='@MinDate' Value='@DateValue' Max='@MaxDate'></SfCalendar>
                </div>
                <div id="container">
                    <div class="sample flex vertical-center">
                        <div class="padding">
                            <SfListView DataSource="@Data" CssClass="e-list-template">
                                <ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text"></ListViewFieldSettings>
                                <ListViewTemplates TValue="DataModel">
                                </ListViewTemplates>
                            </SfListView>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                <div class="source-options my-2">
                    <SfButton CssClass="e-success e-round-corner" IconCss="fa fa-plus" Content="@(L["btnNovo"])"
                    @onclick="@onAddToDo" IsPrimary="true">
                    </SfButton>
                </div>

                <SfGrid DataSource="@ToDoList"
                        ID="ToDos_Grid" 
                        @ref="gridObj"
                        AllowTextWrap=true
                        AllowSelection=true
                        AllowSorting=true
                        Toolbar=@Tool
                        TValue="ToDoDto">
                    <GridEvents RowSelected="RowSelectHandler"
                                OnToolbarClick="ToolbarClickHandler"
                                CommandClicked="OnPetCommandClicked" TValue="ToDoDto">
                    </GridEvents>
                    <GridColumns>
                        <GridColumn Field=@nameof(ToDoDto.Id) IsPrimaryKey="true" Visible="false" HeaderText="Pet" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(ToDoDto.Description) HeaderText="@L["rbtDescricao"]" Width="350"></GridColumn>

                        <GridColumn Field=@nameof(ToDoDto.CategoryDescription) HeaderText="@L["TituloCategoria"]" Width="150"></GridColumn>

                        <GridColumn Field=@nameof(ToDoDto.TodoStartDate) HeaderText="@L["TituloDataInicio"]" Format="d" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(ToDoDto.TodoEndDate) HeaderText="@L["TituloDataFim"]" Format="d" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(ToDoDto.Pending) HeaderText="@L["TituloPendente"]" DisplayAsCheckBox=true Width="80"></GridColumn>
                        <GridColumn HeaderText="" AllowFiltering="false" AllowSorting="false" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn Type=CommandButtonType.Edit
                                                   ButtonOption="@(new CommandButtonOptions()
                                                                       {
                                                                           CssClass = "e-btn e-primary e-round",
                                                                           IconCss = "fa fa-edit"
                                                                       })">
                                </GridCommandColumn>
                                <GridCommandColumn Type=CommandButtonType.Delete
                                                   ButtonOption="@(new CommandButtonOptions()
                                                                       {
                                                                           CssClass = "e-btn e-danger e-round",
                                                                           IconCss = "fa fa-trash"
                                                                       })">
                                </GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>

    <SfDialog CssClass="responsive-dialog-30"
              IsModal="true"
              ShowCloseIcon="false"
              CloseOnEscape="false"
    @bind-Visible="AddEditToDoVisibility">
        <DialogTemplates>
            <Content>
                <AddEditTodo UserSelectedRecord="@SelectedToDo"
                             EditMode="@RecordMode"
                             HeaderCaption="@(RecordMode == OpcoesRegisto.Gravar? EditCaption : NewCaption)" />
            </Content>
            <FooterTemplate>
                <div>
                    <SfButton CssClass="e-primary e-round-corner" IconCss="fas fa-save"
                    @onclick="SaveToDoData" Content="@L["btnSalvar"]">
                    </SfButton>
                    <SfButton CssClass="e-outline e-round-corner" IconCss="fas fa-times"
                    @onclick="(()=>AddEditToDoVisibility = false)" Content="@L["BtnSalir"]">
                    </SfButton>
                </div>
            </FooterTemplate>
        </DialogTemplates>
        <DialogAnimationSettings Effect="@Effect" Duration=500></DialogAnimationSettings>
    </SfDialog>

    <ConfirmDeleteComponent AlertMessageType="AlertMessageType.Error" DialogWidth="20%"
                            DialogTitle="@WarningTitle" ConfirmationText="@L["MSG_ConfirmarOperacao"]"
                            Module="Modules.Pets"
                            Message="@SelectedToDo?.Description"
                            Visible="@DeleteToDoVisibility"
                            OnConfirmationYes="ConfirmDeleteYes"
                            OnConfirmationNo="@(()=>DeleteToDoVisibility=false)"></ConfirmDeleteComponent>

    <AlertUserComponent AlertMessageType="AlertMessageType.Warning"
                        Title="@AlertTitle"
                        OperationType="OpcoesRegisto.Warning"
                        Visibility="@AlertVisibility"
                        Message="@WarningMessage"
                        OnCloseDialog="(()=>AlertVisibility=false)"></AlertUserComponent>

    <ValidateErrorComponent Visible="@ErrorVisibility"
                            ValidationMessages="@ValidationsMessages"
                            OnCloseDialog="@(()=>ErrorVisibility = false)" />


    <SfToast ID="toast_custom" @ref="ToastObj" ShowProgressBar=true
             Title="@ToastTitle" Icon="@ToastIcon"
             Content="@ToastMessage"
             CssClass="@ToastCss" Timeout="2000"
             ShowCloseButton="true">
        <ToastAnimationSettings>
            <ToastShowAnimationSettings Effect="ToastEffect.FadeIn" Duration="600"></ToastShowAnimationSettings>
            <ToastHideAnimationSettings Effect="ToastEffect.FadeOut" Duration="600"></ToastHideAnimationSettings>
        </ToastAnimationSettings>
        <ToastButtons>
            <ToastButton Content="@L["btnFechar"]" OnClick="@HideToast"></ToastButton>
        </ToastButtons>
        <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    </SfToast>


}

@code {

    [Inject] IConfiguration? config { get; set; }
    [Inject] public IStringLocalizer<App>? L { get; set; }
    [Inject] ILogger<App>? logger { get; set; } = null;
    [Inject] public IWebHostEnvironment? _env { get; set; }

    protected string? urlBaseAddress;
    protected IEnumerable<ToDoDto>? ToDoList { get; set; }
    protected IEnumerable<LookupTableVM>? ToDoCategories { get; set; }

    protected ToDoDto? SelectedToDo { get; set; }
    protected string? todosEndpoint;

    protected OpcoesRegisto RecordMode { get; set; }
    protected string? NewCaption { get; set; }
    protected string? EditCaption { get; set; }
    protected string? DeleteCaption;
    protected Modules Module { get; set; }
    protected bool AddEditToDoVisibility { get; set; }
    protected bool DeleteToDoVisibility { get; set; }

    protected bool ErrorVisibility { get; set; } = false;
    protected bool AlertVisibility { get; set; } = false;
    protected string? WarningMessage { get; set; }
    protected string? WarningTitle { get; set; }
    protected bool WarningVisibility { get; set; }
    protected List<string> ValidationsMessages = new();

    protected string? AlertTitle = "";

    protected string? ToastTitle;
    protected string? ToastMessage;
    protected string? ToastCss;
    protected string? ToastIcon;

    protected string ToastContent = "";
    protected string ToastCssClass = "";


    protected DialogEffect Effect = DialogEffect.Zoom;
    protected SfGrid<ToDoDto>? todosGridObj { get; set; }

    protected SfToast? ToastObj { get; set; }

    protected int ToDoId { get; set; }

    List<DataModel> Data = new List<DataModel>();
    protected SfListView<DataModel> SfList;

    protected DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 05);
    protected DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 27);
    protected DateTime DateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15);

    protected DateTime startDate { get; set; }
    protected DateTime endDate { get; set; }

    protected bool Pending { get; set; } = true;
    protected int idxCategory;
    protected SfGrid<ToDoDto>? gridObj { get; set; }


    public class DataModel
    {
        public int Id { get; set; }
        public string? Text { get; set; }
        public string? Image { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        ToDoId = 0;
        idxCategory = 1;

        Data.Add(new DataModel { Text = "Pendentes", Id = 1 });
        Data.Add(new DataModel { Text = "Confirmados", Id = 2 });


        urlBaseAddress = config?["ApiSettings:UrlBase"];
        todosEndpoint = $"{urlBaseAddress}/ToDos";

        ToDoList = await GetAll();
        ToDoCategories = await GetLookupData("ToDoCategories");
    }

    private async Task<IEnumerable<ToDoDto>?> GetAll()
    {
        var result = await GetData<ToDoDto>(todosEndpoint!);

        return result.ToList();
    }

    private async Task<IEnumerable<LookupTableVM>> GetLookupData(string tableName)
    {
        if (string.IsNullOrEmpty(tableName))
            return null;

        urlBaseAddress = config?["ApiSettings:UrlBase"];
        var lookupTablesEndpoint = $"{urlBaseAddress}/LookupTables/GetAllRecords/{tableName}";
        using (HttpClient httpClient = new HttpClient())
        {
            var result = await httpClient.GetFromJsonAsync<IEnumerable<LookupTableVM>>(lookupTablesEndpoint);
            if (result is null)
            {
                return Enumerable.Empty<LookupTableVM>();
            }

            return result;
        }
    }

    private async Task<IEnumerable<T>> GetData<T>(string url) where T : class
    {
        using (HttpClient httpClient = new HttpClient())
        {
            try
            {
                var response = await httpClient.GetFromJsonAsync<IEnumerable<T>>(url);
                if (response == null)
                {
                    return Enumerable.Empty<T>();
                }

                return response;
            }
            catch (HttpRequestException exa)
            {
                logger?.LogError(exa.Message, L["MSG_ApiError"]);

                return Enumerable.Empty<T>();
            }
            catch (Exception ex)
            {
                logger?.LogError(ex.Message, L["MSG_ApiError"]);
                return Enumerable.Empty<T>();
            }
        }
    }

    protected async Task RowSelectHandler(RowSelectEventArgs<ToDoDto> args)
    {
        ToDoId = args.Data.Id;
        SelectedToDo = await GetDtoById(ToDoId);
    }


    public void ValueChange(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, string> args)
    {
        var x = args;
        //if (args.Value == "United States")
        //{
        //    States = new List<string>() { "New York", "Virginia", "Washington" };
        //}
        //else if (args.Value == "Australia")
        //{
        //    States = new List<string>() { "Queensland", "Tasmania", "Victoria" };
        //}
        //Enabled = true;
        //GridRef.PreventRender(false);
    }
    public void OnActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<LookupTableVM> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            var d = args;
        }
    }

    protected void onChangeBreed(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxCategory = args.Value;
        //UserSelectedPet!.IdRaca = idxBreed;
    }

    protected async Task<ToDoDto> GetDtoById(int Id)
    {
        var url = $"{urlBaseAddress}/ToDos/{Id}";
        try
        {
            using (HttpClient httpClient = new HttpClient())
            {
                var todo = await httpClient.GetFromJsonAsync<ToDoDto>(url);
                if (todo?.Id > 0)
                {
                    return todo;
                }
                else
                {
                    return new ToDoDto();
                }
            }
        }
        catch (Exception ex)
        {
            logger?.LogError(ex.Message);
            return new ToDoDto();
        }
    }

    public async Task OnPetCommandClicked(CommandClickEventArgs<ToDoDto> args)
    {
        Module = Modules.ToDos;

        if (args.CommandColumn.Type == CommandButtonType.Edit)
        {
            ToDoId = args.RowData.Id;
            SelectedToDo = await GetDtoById(ToDoId);

            AddEditToDoVisibility = true;
            EditCaption = $"{L["EditMsg"]} tarefa";
            RecordMode = OpcoesRegisto.Gravar;
        }

        if (args.CommandColumn.Type == CommandButtonType.Delete)
        {
            WarningTitle = $"{L["DeleteMsg"]} tarefa?";
            DeleteToDoVisibility = true;
            DeleteCaption = SelectedToDo?.Description;
        }
    }

    public async Task<bool> SaveToDoData()
    {
        var validationMessages = await ValidateToDo();
        if (validationMessages.Any())
        {
            ValidationsMessages = validationMessages;
            ErrorVisibility = true;
            return false;
        }

        var url = $"{urlBaseAddress}/Todos";
        var result = await Save(SelectedToDo!, url);
        return result;
    }

    private async Task<List<string>> ValidateToDo()
    {
        var validatorEndpoint = $"{urlBaseAddress}/Todos/ValidateToDo";
        var errors = await Validate(SelectedToDo!, validatorEndpoint);

        return errors.Count() > 0 ? errors : new List<string>();
    }

    private async Task<List<string>> Validate<T>(T entity, string validatorEndPoint) where T : class
    {
        try
        {

            using (HttpClient httpClient = new HttpClient())
            {

                var response = await httpClient.PostAsJsonAsync(validatorEndPoint, entity);
                if (response.IsSuccessStatusCode == false)
                {
                    var errors = response.Content.ReadFromJsonAsync<List<string>>().Result;
                    if (errors.Count() > 0)
                    {
                        return errors;
                    }

                    else

                        return new List<string>();
                }

                return new List<string>();
            }

        }
        catch (Exception ex)
        {
            return new List<string>() { ex.Message };
        }
    }

    private async Task<bool> Save<T>(T dto, string url) where T : class
    {
        string? entityTitle = string.Empty;
        int? entityId = 0;

        switch (Module)
        {
            case Modules.ToDos:
                entityTitle = L["Pet_Title"];
                entityId = ToDoId;
                break;
        }

        if (RecordMode == OpcoesRegisto.Gravar)
        {
            ToastTitle = $"{L["btnSalvar"]} {entityTitle}";
            try
            {

                using (HttpClient httpClient = new HttpClient())
                {
                    var result = await httpClient.PutAsJsonAsync($"{url}/{entityId}", dto);
                    var success = result.IsSuccessStatusCode;

                    await DisplaySuccessOrFailResults(success, RecordMode);

                    return success;
                }
            }
            catch (Exception exc)
            {
                logger?.LogError(exc.Message, $"{L["MSG_ApiError"]}");
                return false;
            }
        }
        else // Insert
        {
            ToastTitle = $"{L["creationMsg"]} {entityTitle}";
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    var result = await httpClient.PostAsJsonAsync(url, dto);
                    var success = result.IsSuccessStatusCode;

                    await DisplaySuccessOrFailResults(success, RecordMode);

                    return success;
                }
            }
            catch (Exception exc)
            {
                logger?.LogError(exc.Message, $"{L["MSG_ApiError"]}");
                return false;
            }
        }

    }

    private async Task DisplaySuccessOrFailResults(bool success, OpcoesRegisto addUpdateOperation)
    {

        // TODO adapt to delete operations

        if (addUpdateOperation == OpcoesRegisto.Gravar) // update
        {
            if (!success)
            {
                AlertVisibility = true;
                AlertTitle = L["FalhaGravacaoRegisto"];
                WarningMessage = L["MSG_ApiError"];
            }
            else
            {
                ToastCss = "e-toast-success";
                ToastMessage = L["SuccessUpdate"];
                ToastIcon = "fas fa-check";
            }
        }
        else // insert
        {
            if (!success)
            {
                AlertVisibility = true;
                AlertTitle = L["FalhaCriacaoRegisto"];
                WarningMessage = L["MSG_ApiError"];
            }
            else
            {
                ToastCss = "e-toast-success";
                ToastMessage = L["SuccessInsert"];
                ToastIcon = "fas fa-check";
            }
        }

        ToDoList = await GetAll();
        await InvokeAsync(StateHasChanged);

        await Task.Delay(100);
        await ToastObj.ShowAsync();

        AddEditToDoVisibility = false;
    }

    protected async Task HideToast()
    {
        await ToastObj!.HideAsync();
    }

    protected async Task ConfirmDeleteYes()
    {
        ToastTitle = $"{L["DeleteMsg"]} {L["Pet_Title"]}";

        await DeleteTodo();

        ToastCssClass = "e-toast-success";
        ToastContent = L["RegistoAnuladoSucesso"];

        await Task.Delay(200);
        await ToastObj!.ShowAsync();

    }

    private async Task DeleteTodo()
    {
        string url = $"{urlBaseAddress}/Todos/{ToDoId}";
        try
        {
            using (HttpClient httpClient = new HttpClient())
            {
                var response = await httpClient.DeleteAsync(url);
                response.EnsureSuccessStatusCode();
                if (response.StatusCode != System.Net.HttpStatusCode.NoContent)
                {
                    ValidationsMessages = new List<string>() { L["FalhaAnulacaoRegisto"] };
                    ErrorVisibility = true;
                    return;
                }

                ToDoList = await GetAll();
            }

            DeleteToDoVisibility = false;
            AlertTitle = "Apagar ToDo";
            WarningMessage = L["SuccessDelete"];
            AlertVisibility = true;
        }
        catch (Exception ex)
        {
            logger?.LogError(ex.Message, $"{L["MSG_ApiError"]}");

            AlertTitle = $"{L["DeleteMsg"]} {L["Pet_Title"]}";
            WarningMessage = $"Erro ({ex.Message})";
            AlertVisibility = true;
        }

    }

    public void onAddToDo(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        RecordMode = OpcoesRegisto.Inserir;
        NewCaption = $"{L["NewMsg"]} tarefa";
        Module = Modules.ToDos;

        SelectedToDo = new()
            {
                CategoryId = -1,
                Description = "",
                StartDate = DateTime.Now.ToShortDateString(),
                EndDate = DateTime.Now.AddDays(1).ToShortDateString(),
                Status = 0,
            };

        AddEditToDoVisibility = true;
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        ToDoList = await GetAll(); // return 'expensesList'

        if (ToDoList?.Count() == 0)
        {
            ToastTitle = L[""];
            ToastMessage = L["TituloManutencaoDespesas"];
            ToastCss = "e-toast-warning";

            StateHasChanged();
            await Task.Delay(100);
            await ToastObj!.ShowAsync();
            await Task.Delay(1000);
            return;
        }

        if (args.Item.Id == "ToDos_Grid_excelexport")
        {
            try
            {
                ExcelExportProperties excelExportProperties = new ExcelExportProperties();
                excelExportProperties.IncludeTemplateColumn = true;
                excelExportProperties.IncludeHeaderRow = true;
                excelExportProperties.FileName = $"ToDos_{DateTime.Now.ToShortTimeString()}.xlsx";
                await gridObj!.ExportToExcelAsync(excelExportProperties);

            }
            catch (Exception ex)
            {
                var s = ex.Message;
                throw;
            }
        }
        else if (args.Item.Id == "Pending")
        {
            var pendingQry = from record in ToDoList
                             where record.Status == 1
                             select record;
            //pageBadgeCaption = L["TituloDespesasEsteAno"];
            ToDoList = pendingQry;

        }
        else if (args.Item.Id == "Completed")
        {
            var completedQry = from record in ToDoList
                             where record.Status == 0
                             select record;
            //pageBadgeCaption = L["TituloDespesasEsteAno"];
            ToDoList = completedQry;

        }
        else if (args.Item.Id == "All")
        {
            ToDoList = await GetAll();
        }
    }



}
<style>
    #container .e-listview {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
    }

    .sample {
        justify-content: center;
        min-height: 280px;
    }

    .vertical-center {
        align-items: center;
    }

    .padding {
        padding: 4px;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .margin {
        margin: 10px;
    }</style>